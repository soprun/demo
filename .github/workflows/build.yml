name: 'Build'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_ENV: 'test'
  APP_RELEASE: 'unknown'
  PHP_VERSION: 8.1
  PHP_EXTENSIONS: 'intl'
  PHP_TOOLS: 'composer:v2, psalm, cs2pr'

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Get build version'
        id: version
        shell: bash
        run: |
          set +e
          tag="$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null)"
          tag="${tag/v/}"
          if [ -z "${tag}" ]; then
            tag="0.0.0"
          fi
          echo "APP_RELEASE=${tag}-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: 'Setup PHP with Xdebug'
        id: setup-php
        uses: shivammathur/setup-php@2.7.0
        with:
          coverage: xdebug
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          tools: ${{ env.PHP_TOOLS }}

      - name: 'Check PHP Version'
        run: php -v

      - name: 'Install Symfony CLI'
        run: |
          echo "::group::installer symfony cli"
          wget https://get.symfony.com/cli/installer -O - | bash
          echo "::endgroup::"
          echo "::group::Check if any dependencies are compromised"
          /home/runner/.symfony/bin/symfony check:security
          echo "::endgroup::"

      - name: 'Get composer cache directory'
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: 'Cache dependencies'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php-version }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php-version }}-composer-

      - name: 'Install dependencies'
        id: install
        run: |
          echo "::group::composer validate"
          composer validate --strict
          echo "::endgroup::"
          echo "::group::composer install"
          composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader
          echo "::endgroup::"
          echo "::group::composer dump environment variables"
          composer dump-env ${{ env.APP_ENV }}
          echo "::endgroup::"

      - name: 'Create Database'
        continue-on-error: true
        run: |
          mkdir -p ./data
          touch ./data/database_test.sqlite

      - name: 'Uploading an archive production artifacts'
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-dist
          path: |
            public/reports/**
            .env.local.php

      - name: 'Lint YAML files'
        continue-on-error: true
        if: always() && steps.install.outcome == 'success'
        run: php ./bin/console lint:yaml config --parse-tags

      - name: 'Lint Twig templates'
        continue-on-error: true
        if: always() && steps.install.outcome == 'success'
        run: php ./bin/console lint:twig templates --env=prod

      - name: 'Lint XLIFF translations'
        continue-on-error: true
        if: always() && steps.install.outcome == 'success'
        run: php ./bin/console lint:xliff translations

      - name: 'Lint Parameters and Services'
        continue-on-error: true
        if: always() && steps.install.outcome == 'success'
        run: php ./bin/console lint:container --no-debug

      - name: 'Lint Doctrine entities'
        continue-on-error: true
        if: always() && steps.install.outcome == 'success'
        run: php ./bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction

      - name: 'Run PHPStan static analysis tool'
        continue-on-error: true
        run: php ./vendor/bin/phpstan analyse ./src --memory-limit=-1 --error-format=checkstyle | cs2pr

      #      - name: 'Run Psalm'
      #        continue-on-error: true
      #        run: psalm --output-format=github

      - name: 'Run PHPUnit testing'
        continue-on-error: true
        run: php ./bin/phpunit --testdox --colors=always

      - name: 'Run mutation testing '
        continue-on-error: true
        run: php ./vendor/bin/infection --coverage=public/reports/infection