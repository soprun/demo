name: 'Continuous integration'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_ENV: 'ci'
  APP_RELEASE: 'unknown'
  PHP_VERSION: 8.1
  PHP_EXTENSIONS: 'intl'
  PHP_TOOLS: 'composer:v2, psalm, cs2pr'

jobs:
  build:
    name: 'Building'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Get release version'
        id: version
        shell: bash
        run: |
          set +e
          tag="$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null)"
          tag="${tag/v/}"
          if [ -z "${tag}" ]; then
            tag="0.0.0"
          fi
          release="${tag}-$(git rev-parse --short HEAD)"
          echo "APP_RELEASE=${release}" >> $GITHUB_ENV
          echo "::set-output name=release::${release}"
          echo "::debug::release=${release}"

      - name: 'Setup application environment'
        shell: bash
        run: |
          # Application environment
          echo "::warning::APP_ENV=${APP_ENV}"
          echo "::warning::APP_RELEASE=${APP_RELEASE}"

          echo "APP_ENV=${APP_ENV}" >> .env.local
          echo "APP_RELEASE=${APP_RELEASE}" >> .env.local

      - name: 'Setup PHP with Xdebug'
        id: setup-php
        uses: shivammathur/setup-php@2.7.0
        with:
          coverage: xdebug
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          tools: ${{ env.PHP_TOOLS }}

      - name: 'Install Symfony CLI'
        run: |
          echo "::group::installer symfony cli"
          wget https://get.symfony.com/cli/installer -O - | bash
          echo "::endgroup::"
          echo "::group::Check if any dependencies are compromised"
          /home/runner/.symfony/bin/symfony check:security
          echo "::endgroup::"

      - name: 'Get composer cache directory'
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: 'Cache dependencies'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 'Install dependencies'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        id: install
        run: |
          composer validate --strict
          composer install --prefer-dist --no-interaction --optimize-autoloader --quiet

      - name: 'Artifact: .env.local'
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-backend
          path: |
            ./.env.local
            ./.env.local.php
            ./vednor

  test:
    name: 'Testing'
    needs: build
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: 'Run PHPStan static analysis tool'
        continue-on-error: true
        run: php ./vendor/bin/phpstan analyse ./src --error-format=checkstyle | cs2pr

      #      - name: 'Run Psalm'
      #        continue-on-error: true
      #        run: psalm --output-format=github

      - name: 'Run PHPUnit testing'
        continue-on-error: true
        run: php ./bin/phpunit --testdox --colors=always

      - name: 'Run mutation testing '
        continue-on-error: true
        run: php ./vendor/bin/infection --coverage=public/reports/infection

      - name: 'Artifact: build reports'
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-reports
          path: |
            ./public/reports/*

  build-assets:
    name: 'Building assets'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v2

      - name: 'Setup node.js'
        uses: actions/setup-node@v2
        env:
          NODE_ENV: development
        with:
          node-version: 14
          check-latest: true
          cache: yarn
          cache-dependency-path: '**/yarn.lock'

      - name: 'Get yarn cache directory path'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: 'Cache dependencies'
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 'Yarn install dependencies'
        run: yarn install

      - name: 'Yarn build'
        run: yarn run build

      - name: 'Archive production artifacts'
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-frontend
          path: public/build

